/*******************************************************************************
 * Company:
 *
 * Project:        GPS frequency standard
 *
 * Description:    serial port driver for usage with printf() calls
 *
 * Filename:       rs232.h
 *
 * Author:         Tobias Pl√ºss <tpluess@ieee.org>
 *
 * Creation-Date:  03.03.2020
 ******************************************************************************/

#ifndef __RS232_H__
#define __RS232_H__

/*******************************************************************************
 * INCLUDE FILES
 ******************************************************************************/

#include <stdio.h>
#include <stdbool.h>

/*******************************************************************************
 * CONSTANT DEFINITIONS
 ******************************************************************************/

/*******************************************************************************
 * MACRO DEFINITIONS
 ******************************************************************************/

/*******************************************************************************
 * TYPE DEFINITIONS
 ******************************************************************************/

/*******************************************************************************
 * FUNCTION PROTOTYPES (PUBLIC)
 ******************************************************************************/

/*============================================================================*/
extern void rs232_init(void);
/*------------------------------------------------------------------------------
  Function:
  initialise pin assignment and the usart 2
  in:  none
  out: none
==============================================================================*/


/*============================================================================*/
extern int kbhit(void);
/*------------------------------------------------------------------------------
  Function:
  checks if there is some data in the input buffer (i.e. the keyboard has been
  hit in the terminal) and returns the received character
  in:  none
  out: -1 if no character received, otherwise returns the received character
==============================================================================*/


/*============================================================================*/
extern void txchar(char c);
/*------------------------------------------------------------------------------
  Function:
  sends a single character (puts it into the tx buffer)
  in:  c -> character to be transmitted
  out: none
==============================================================================*/


/*============================================================================*/
extern void txstr(const char* str);
/*------------------------------------------------------------------------------
  Function:
  sends a string (puts it into the tx buffer)
  in:  str -> string to be transmitted
  out: none
==============================================================================*/


/*============================================================================*/
extern bool canread(void);
/*------------------------------------------------------------------------------
  Function:
  check if there are characters to be read from the input
  in:  none
  out: returns true if there is something in the buffer, false otherwise
==============================================================================*/


/*******************************************************************************
 * END OF CODE
 ******************************************************************************/

#endif

